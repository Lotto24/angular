name: Deploy Angular Imports Orchestrator Example to Github Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      release:
        type: choice
        description: Make a choice
        options:
          - major
          - minor
          - patch

env:
  NX_CACHE_DIRECTORY: '.nx-cache'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "publish"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .angular/cache
            .nx-cache
          key: ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx', '**.html', '**.scss') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: npm ci

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Publish to NPM
        id: publish
        run: npx nx run-many publish --dry-run --release=${{inputs.release}}
